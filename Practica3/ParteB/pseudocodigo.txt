//PSEUDOCÓDIGO

mutex mtx;
condvar prod, cons;

int prod_count = 0, cons_count = 0;
cbuffer_t *cbuffer;

int fifoproc_write(char *buff, int len){
	char kbuffer[MAX_KBUF];

	if(len > MAX_CBUFFER_LEN || len > MAX_KBUF){  PREGUNTA -> si el texto tiene más de 50 carácteres, ¿no se va a poder escribir nunca?
		return Error;
	}

	if(copy_from_user(kbuffer, buff, len)){
		return Error;
	}

	lock(mtx);

	while(nr_gaps_cbuffer_t(cbuffer) < len && cons_count > 0){
		cond_wait(prod, mtx);
	}

	if(cons_count == 0){
		unlock(mtx);
		return -EPIPE;
	}

	insert_items_cbuffer_t(cbuffer, kbuffer, len);

	cond_signal(cons);

	unlock(mtx);

	return len;
}

int fifoproc_read(char *buff, int len){
	char kbuffer[MAX_KBUF];
	
	if(len > MAX_CBUFFER_LEN){ 
		return Error;
	}

	lock(mtx);

	while(size_cbuffer_t(cbuffer) < len && prod_count > 0){
		cond_wait(cons, mtx);
	}

	if(prod_count == 0){
		unlock(mtx);
		return 0;
	}

	remove_items_cbuffer_t(cbuffer, kbuffer, len);

	cons_signal(prod);

	unlock(mtx);

	if(copy_to_user(buff, kbuffer, len) && is_empty(cbuffer) != 0){ 
		return Error;
	}

	return len;
}

int fifoproc_open(struct *inode, struct *file){
	
	//variable condicion
	lock(mtx);
	if(file->f_mode & FMODE_READ){ //FIFO ABIERTO POR UN CONSUMIDOR
		cons_count++;
		cond_signal(prod);
		while(prod_count==0)
			cond_wait(cons,mtx);
	}
	else{ //FIFO ABIERTO POR UN PRODUCTOR
		prod_count++;
		cond_signal(cons);
		while(cons_count==0)
			cond_wait(prod,mtx);
	}
	unlock(mtx);

}

int fifoproc_release(struct *inode, struct *file){
	lock(mtx);
	if(file->f_mode & FMODE_READ){
		cons_count--;
		cond_signal(productor)
	}
	else{
		prod_count--;
		cond_signal(cons)
	}

	if(cons_count + prod_count == 0){
		clear_cbuffer_t(cbuf);
	}
	unlock(mtx);
}